#!/usr/bin/env bash

echo "loading sa"

if (sudo yabai --load-sa); then
    echo "sa loaded";
else
    terminal-notifier -title "yabai scripting-addition load failed!" -message "scripting-addition did not load!" -ignoreDnD
    echo "sa not loaded"
fi

# reset configs
echo "resetting configs" # in case this is a rerun
for i in $(yabai -m signal --list | jq '.[].index'); do
    yabai -m signal --remove 0;
done
for i in $(yabai -m rule --list | jq '.[].index'); do
    yabai -m rule --remove 0;
done
yabai -m config \
    window_animation_duration 0.0

# configure clarity updates
echo "configuring clarity signals"
REL_SPACES_IND="osascript -e 'tell application id \"tracesof.Uebersicht\" to refresh widget id \"clarity-spaces-jsx\"'"
REL_BAR_IND="osascript -e 'tell application id \"tracesof.Uebersicht\" to refresh widget id \"clarity-bar-jsx\"'"

# - if space indicators are enabled
yabai -m signal --add event=space_changed   action="$REL_SPACES_IND"
yabai -m signal --add event=space_created   action="$REL_SPACES_IND"
yabai -m signal --add event=space_destroyed action="$REL_SPACES_IND"
yabai -m signal --add event=display_changed action="$REL_SPACES_IND"
# - if app icon indicators within space indicators are enabled
yabai -m signal --add event=window_created   action="$REL_SPACES_IND"
yabai -m signal --add event=window_moved     action="$REL_SPACES_IND"
yabai -m signal --add event=window_resized   action="$REL_SPACES_IND"
yabai -m signal --add event=window_destroyed action="$REL_SPACES_IND"
yabai -m signal --add event=window_minimized   action="$REL_SPACES_IND"
yabai -m signal --add event=window_deminimized action="$REL_SPACES_IND"
yabai -m signal --add event=application_hidden action="$REL_SPACES_IND"
yabai -m signal --add event=application_visible action="$REL_SPACES_IND"

# - if center space indicators are enabled
yabai -m signal --add event=space_created    action="$REL_BAR_IND"
yabai -m signal --add event=space_changed    action="$REL_BAR_IND"
yabai -m signal --add event=space_destroyed    action="$REL_BAR_IND"
yabai -m signal --add event=display_changed  action="$REL_BAR_IND"
# - if wallpaper blur is enabled
yabai -m signal --add event=window_created   action="$REL_BAR_IND"
yabai -m signal --add event=window_moved     action="$REL_BAR_IND"
yabai -m signal --add event=window_resized   action="$REL_BAR_IND"
yabai -m signal --add event=window_destroyed action="$REL_BAR_IND"
yabai -m signal --add event=window_minimized   action="$REL_BAR_IND"
yabai -m signal --add event=window_deminimized action="$REL_BAR_IND"
yabai -m signal --add event=application_hidden action="$REL_BAR_IND"
yabai -m signal --add event=application_visible action="$REL_BAR_IND"
yabai -m signal --add event=mission_control_exit action="$REL_BAR_IND"

# refresh immediately on yabai load
echo "reloading widgets"
sh -c "$REL_SPACES_IND"
sh -c "$REL_BAR_IND"

# exceptions to apps and things that tend to not work well
echo "configuring exceptions"

# - auto unzoom when switching windows (ref: https://github.com/koekeishiya/yabai/issues/1481#issuecomment-1287596830)
yabai -m signal --add event=window_focused action='if [[ $(yabai -m query --windows --window | jq ".\"is-floating\"") == "false" ]]; then
win_id=$(yabai -m query --windows --space | jq "map(select(.\"has-fullscreen-zoom\" and (.\"has-focus\" | not)))[0].id")
if [[ $win_id != "null" ]]; then yabai -m window $win_id --toggle zoom-fullscreen; fi
fi'

# - float if window is not resizable
CHECK_COND_FORCE='yabai -m query --windows --window $YABAI_WINDOW_ID | jq -er ".\"can-resize\" == false and .\"is-floating\" == false"'
POS_FORCE_VAR='pos_x="$(bc -l <<< "$(yabai -m query --displays --window $YABAI_WINDOW_ID | jq ".frame.w/2") - $(yabai -m query --windows --window $YABAI_WINDOW_ID | jq ".frame.w/2") + $(yabai -m query --displays --window $YABAI_WINDOW_ID | jq ".frame.x")")" pos_y="$(bc -l <<< "$(yabai -m query --displays --window $YABAI_WINDOW_ID | jq ".frame.h/2") - $(yabai -m query --windows --window $YABAI_WINDOW_ID | jq ".frame.h/2") + $(yabai -m query --displays --window $YABAI_WINDOW_ID | jq ".frame.y")")"'
FLOAT_FORCE='yabai -m window $YABAI_WINDOW_ID --toggle float --move abs:$pos_x:$pos_y;'
yabai -m signal --add event=window_created action="$CHECK_COND_FORCE && $POS_FORCE_VAR && $FLOAT_FORCE"

# - focus some window on space if destroyed
FOCUS_ON_DESTORY='sleep 0.5 && (yabai -m query --windows --window || (yabai -m query --spaces --space | jq ".\"first-window\"" | xargs -I {} yabai -m window --focus {} || true))'
yabai -m signal --add event=window_destroyed action="$FOCUS_ON_DESTORY"

# - focus some window of the app if the front app has switched
yabai -m signal --add event=application_front_switched action='sleep 0.5 && (yabai -m query --windows --window || (yabai -m query --windows --window | jq ".app" | xargs -I {} yabai -m window --focus {} || true))' # TODO: fix

# - remove shadow on float
#   workaround with 'window_shadow float' to include shadows for unmanaged windows like spotlight, 
#   but we don't want shadows for yabai-managed floating windows
#
# REMOVE_FLOATING_SHADOW='if [[ $(yabai -m query --windows --window $YABAI_WINDOW_ID | jq ".\"is-floating\" and .\"has-shadow\"") == "true" ]]; then yabai -m window $YABAI_WINDOW_ID --toggle shadow; fi'
# REMOVE_FLOATING_SHADOW_EXCEPTIONS="^(coreautha)$"
# yabai -m signal --add event=window_focused action="$REMOVE_FLOATING_SHADOW" app!="$REMOVE_FLOATING_SHADOW_EXCEPTIONS"
# yabai -m signal --add event=window_moved action="$REMOVE_FLOATING_SHADOW" app!="$REMOVE_FLOATING_SHADOW_EXCEPTIONS"

# - if role is AXSheet, then disable borders temporarily
#yabai -m signal --add event=window_focused action='if [[ $(yabai -m query --windows --window | jq ".role") == "\"AXSheet\"" ]]; then borders active_color=0x00000000; fi';
#yabai -m signal --add event=window_focused action='if [[ $(yabai -m query --windows --window | jq ".role") != "\"AXSheet\"" ]]; then ~/.config/borders/bordersrc 2>/dev/null 1>&2; fi';

# - other rules
EXCLUDE_ROLES_REGEX="(AXMenu|AXSheet|AXDialog|AXPopover|AXSystemDialog|AXFloatingWindow|AXSystemFloatingWindow)"
yabai -m rule --add role="^$EXCLUDE_ROLES_REGEX$" manage=off
yabai -m rule --add subrole="^$EXCLUDE_ROLES_REGEX$" manage=off

yabai -m rule --add app="(^coreauth.*|^universalAccessAuthWarn$)" sub-layer=above manage=off
yabai -m rule --add app="^Finder$" title="^(Move|Copy|Delete|Connecting to Server)$" sub-layer=above manage=off
yabai -m rule --add app="^Digital Colou?r Meter$" sub-layer=above manage=off sticky=on
yabai -m rule --add app="^(Archive Utility|DiskImageMounter|Installer)$" sub-layer=above manage=off
yabai -m rule --add app="^Macs Fan Control$" sub-layer=above manage=off
yabai -m rule --add app="^Stickies$" sub-layer=above manage=off sticky=on
yabai -m rule --add app="^Microsoft Teams$" title="^Microsoft Teams Notification$" sub-layer=above manage=off
yabai -m rule --add app="^Final Cut Pro$" title="^Background Tasks$" sub-layer=above manage=off

yabai -m rule --add title="^(Settings|Preferences)$" sub-layer=normal manage=off
yabai -m rule --add app="^(System Settings|System Preferences)$" sub-layer=normal manage=off
yabai -m rule --add title="^Problem Report for" sub-layer=normal manage=off
yabai -m rule --add app="^(Calculator|Calculator Plus)$" sub-layer=normal manage=off
yabai -m rule --add app="^Safari$" title="^(General|Privacy|Security|Search|Extensions|Websites|Advanced|Develop|Accounts|AutoFill|Notifications|Password|Tabs|Media)$" sub-layer=normal manage=off
# yabai -m rule --add app="^Parallels Desktop" title="(Settings|Preferences|Configuration|Control Cent(re|er))$" sub-layer=normal manage=off
yabai -m rule --add app="^Parallels Desktop" sub-layer=normal manage=off
yabai -m rule --add app="^IntelliJ IDEA$" title="^(Project Structure)$" sub-layer=normal manage=off
yabai -m rule --add app="^IntelliJ IDEA$" title="^(Rename|Move|Copy|Delete|Safe Delete|Change|Format|Reformat|Add).*$" sub-layer=normal manage=off
yabai -m rule --add app="^FaceTime$" sub-layer=normal manage=off sticky=on

yabai -m rule --add app="^Xcode$" title="^(Devices|Simulators)$" manage=off
yabai -m rule --add app="^iStat Menus" manage=off
yabai -m rule --add app="^Simulator$" manage=off
yabai -m rule --add app="^Delete Apps$" manage=off
yabai -m rule --add app="bersicht$" sub-layer=below manage=off
yabai -m rule --add app="^TimeMachineEditor$" manage=off
yabai -m rule --add app="^Mac Mouse Fix$" manage=off
yabai -m rule --add app="^NTFS for Mac$" manage=off
yabai -m rule --add app="^(QuickTime Player|mpv|IINA)$" manage=off
yabai -m rule --add app="^(Time Machine)$" manage=off

# - for windows that aren't windows
yabai -m rule --add app!="^(Xcode|Finder|iTerm2)$" title="^$" sub-layer=normal manage=off

# - Fullscreen optimized games
yabai -m rule --add app="^Genshin Impact$" native-fullscreen=on manage=off
yabai -m rule --add app="^Honkai: Star Rail$" native-fullscreen=on manage=off
yabai -m rule --add app='java' title='^(Minecraft(\*?) [\d\.]+)$' native-fullscreen=on manage=off
yabai -m rule --add app='java' title='^Lunar Client' native-fullscreen=on manage=off

#layouts
echo "configuring layouts and appearance"
yabai -m config \
    external_bar all:0:28 \
    window_gap 8 \
    top_padding 4 \
    bottom_padding 4 \
    left_padding 4 \
    right_padding 4 \
    mouse_modifier ctrl \
    mouse_follows_focus off \
    focus_follows_mouse autoraise \
    window_origin_display cursor \
    window_shadow float \
    insert_feedback_color 0xffca66ff \
    window_opacity               off \
    active_window_opacity        1.0 \
    normal_window_opacity        1.0 \
    window_zoom_persist off \
    split_type auto \
    auto_balance on \
    display_arrangement_order default \
    window_animation_duration 0.0 \
    layout bsp

# invoke JankyBorders
~/.config/borders/bordersrc 2>/dev/null 1>&2 &

# done
echo "yabai config is now loaded."
terminal-notifier -title "yabai ready" -message "yabai is fully loaded." -ignoreDnD

# refresh ubersicht again now that we are done
sh -c "$REL_SPACES_IND"
sh -c "$REL_BAR_IND"

# apply rules to all existing rules
yabai -m rule --apply
