#!/usr/bin/env bash

echo "loading sa"

if (sudo yabai --load-sa); then
    echo "sa loaded";
else
    terminal-notifier -title "yabai scripting-addition load failed!" -message "scripting-addition did not load!" -ignoreDnD
    echo "sa not loaded"
fi

# reset configs
echo "resetting configs" # in case this is a rerun

while [[ "$(yabai -m signal --list | tr -d '[:space:]')" != "[]" ]]; do
    yabai -m signal --remove 0;
done

while [[ "$(yabai -m rule --list | tr -d '[:space:]')" != "[]" ]]; do
    yabai -m rule --remove 0;
done

yabai -m config \
    window_animation_duration 0.0 \
    layout float

# configure clarity updates
echo "configuring clarity signals"

# reformat to multiple lines
REL_SPACES_IND="osascript -e 'if application id \"tracesof.Uebersicht\" is running then' -e 'tell application id \"tracesof.Uebersicht\"' -e 'refresh widget id \"clarity-spaces-jsx\"' -e 'end tell' -e 'end if'"
REL_BAR_IND="osascript -e 'if application id \"tracesof.Uebersicht\" is running then' -e 'tell application id \"tracesof.Uebersicht\"' -e 'refresh widget id \"clarity-bar-jsx\"' -e 'end tell' -e 'end if'"
REL_STATUS_IND="osascript -e 'if application id \"tracesof.Uebersicht\" is running then' -e 'tell application id \"tracesof.Uebersicht\"' -e 'refresh widget id \"clarity-status-jsx\"' -e 'end tell' -e 'end if'"

# - if space indicators are enabled
yabai -m signal --add event=space_changed   action="$REL_SPACES_IND"
yabai -m signal --add event=space_created   action="$REL_SPACES_IND"
yabai -m signal --add event=space_destroyed action="$REL_SPACES_IND"
yabai -m signal --add event=display_changed action="$REL_SPACES_IND"
yabai -m signal --add event=system_woke     action="$REL_SPACES_IND"
yabai -m signal --add event=mission_control_exit action="$REL_SPACES_IND"
# - if app icon indicators within space indicators are enabled
yabai -m signal --add event=window_created   action="$REL_SPACES_IND"
yabai -m signal --add event=window_moved     action="$REL_SPACES_IND"
yabai -m signal --add event=window_resized   action="$REL_SPACES_IND"
yabai -m signal --add event=window_destroyed action="$REL_SPACES_IND"
yabai -m signal --add event=window_minimized   action="$REL_SPACES_IND"
yabai -m signal --add event=window_deminimized action="$REL_SPACES_IND"
yabai -m signal --add event=application_hidden action="$REL_SPACES_IND"
yabai -m signal --add event=application_visible action="$REL_SPACES_IND"
yabai -m signal --add event=application_launched action="$REL_SPACES_IND"
yabai -m signal --add event=application_terminated action="$REL_SPACES_IND"

# - if center space indicators are enabled
yabai -m signal --add event=space_created    action="$REL_BAR_IND"
yabai -m signal --add event=space_changed    action="$REL_BAR_IND"
yabai -m signal --add event=space_destroyed    action="$REL_BAR_IND"
yabai -m signal --add event=display_changed  action="$REL_BAR_IND"
yabai -m signal --add event=system_woke      action="$REL_BAR_IND"
yabai -m signal --add event=mission_control_exit action="$REL_BAR_IND"
# - if wallpaper blur is enabled
yabai -m signal --add event=window_created   action="$REL_BAR_IND"
yabai -m signal --add event=window_moved     action="$REL_BAR_IND"
yabai -m signal --add event=window_resized   action="$REL_BAR_IND"
yabai -m signal --add event=window_destroyed action="$REL_BAR_IND"
yabai -m signal --add event=window_minimized   action="$REL_BAR_IND"
yabai -m signal --add event=window_deminimized action="$REL_BAR_IND"
yabai -m signal --add event=application_hidden action="$REL_BAR_IND"
yabai -m signal --add event=application_visible action="$REL_BAR_IND"
yabai -m signal --add event=application_launched action="$REL_BAR_IND"
yabai -m signal --add event=application_terminated action="$REL_BAR_IND"

# - if status indicators are enabled
yabai -m signal --add event=display_changed  action="$REL_STATUS_IND"
yabai -m signal --add event=system_woke      action="$REL_STATUS_IND"

# refresh immediately on yabai load
echo "reloading widgets"
sh -c "$REL_SPACES_IND"
sh -c "$REL_BAR_IND"
sh -c "$REL_STATUS_IND"

# exceptions to apps and things that tend to not work well
echo "configuring exceptions"
QUERY_WINDOW_DATA='WINDOW_DATA=$(yabai -m query --windows --window $YABAI_WINDOW_ID)'

# - auto unzoom when switching windows (ref: https://github.com/koekeishiya/yabai/issues/1481#issuecomment-1287596830)
yabai -m signal --add event=window_focused action='
    if [[ $(yabai -m query --windows --window | jq ".\"is-floating\"") == "false" ]]; then
        win_id=$(yabai -m query --windows --space | jq "map(select(.\"has-fullscreen-zoom\" and (.\"has-focus\" | not)))[0].id")
        if [[ $win_id != "null" ]]; then
            yabai -m window $win_id --toggle zoom-fullscreen;
        fi
    fi
'

# - float if window is not resizable
# - and automatically use padded center for floating windows
EXCLUDE_CENTER_ROLES_REGEX="(AXMenu|AXSheet|AXDialog|AXSystemDialog|AXPopover)"
CHECK_UNFLOATED_UNRESIZABLE='printf "$WINDOW_DATA" | jq -er ".\"can-resize\" == false and .\"is-floating\" == false"'
CHECK_IS_FLOATING='printf "$WINDOW_DATA" | jq -er ".\"is-floating\""'
CHECK_IS_NOT_EXCLUDED_ROLE='printf "$WINDOW_DATA" | jq -r ".role" | grep -vE "'"$EXCLUDE_CENTER_ROLES_REGEX"'"'
CHECK_IS_NOT_EXCLUDED_SUBROLE='printf "$WINDOW_DATA" | jq -r ".subrole" | grep -vE "'"$EXCLUDE_CENTER_ROLES_REGEX"'"'
CENTER_AND_FLOAT_WINDOW='(
    echo "centering and floating window $YABAI_WINDOW_ID with data=$WINDOW_DATA";
    DISPLAY_DATA=$(yabai -m query --displays --display);
    WINDOW_DATA=$(yabai -m query --windows --window $YABAI_WINDOW_ID);

    if (printf "$WINDOW_DATA" | jq -er ".\"is-floating\" == false"); then
        yabai -m window $YABAI_WINDOW_ID --toggle float;
    fi;

    if (
        (printf "$WINDOW_DATA" | jq -er ".\"can-resize\"") &&
        (printf "[$DISPLAY_DATA, $WINDOW_DATA]" | jq -er ".[1].frame.w > .[0].frame.w * 3/4 or .[1].frame.h > .[0].frame.h * 3/4")
    ); then
        yabai -m window $YABAI_WINDOW_ID --grid 8:8:1:1:6:6;
    fi;

    WINDOW_DATA=$(yabai -m query --windows --window $YABAI_WINDOW_ID);
    pos_x="$(printf "[$DISPLAY_DATA, $WINDOW_DATA]" | jq ".[0].frame.w/2 - .[1].frame.w/2 + .[0].frame.x")";
    pos_y="$(printf "[$DISPLAY_DATA, $WINDOW_DATA]" | jq ".[0].frame.h/2 - .[1].frame.h/2 + .[0].frame.y")";
    yabai -m window $YABAI_WINDOW_ID --move abs:$pos_x:$pos_y;
)'
yabai -m signal --add event=window_created action="$QUERY_WINDOW_DATA; ($CHECK_IS_FLOATING || $CHECK_UNFLOATED_UNRESIZABLE) && ($CHECK_IS_NOT_EXCLUDED_ROLE && $CHECK_IS_NOT_EXCLUDED_SUBROLE) && $CENTER_AND_FLOAT_WINDOW"

# - float Finder Info windows (title = "*Info" width <= 400, standard Finder Info window width are always larger than 400), then center it
CHECK_WIDTH_MAX_400='(printf "$WINDOW_DATA" | jq -er ".frame.w <= 400")'
SET_SUBLAYER_ABOVE='yabai -m window $YABAI_WINDOW_ID --sub-layer above'
yabai -m signal --add event=window_created app="^Finder$" title="^.*Info$" action="$QUERY_WINDOW_DATA; ($CHECK_WIDTH_MAX_400 && $FLOAT_WINDOW && $SET_SUBLAYER_ABOVE)"

# - focus some window on space if destroyed
FOCUS_ON_DESTORY='sleep 0.5 && (yabai -m query --windows --window || (yabai -m query --spaces --space | jq ".\"first-window\"" | xargs -I {} yabai -m window --focus {} || true))'
yabai -m signal --add event=window_destroyed action="$FOCUS_ON_DESTORY"

# - focus some window of the app if the front app has switched
yabai -m signal --add event=application_front_switched action='sleep 0.5 && (yabai -m query --windows --window || (yabai -m query --windows --window | jq ".app" | xargs -I {} yabai -m window --focus {} || true))' # TODO: fix

# - automatically prevent management when time machine browser (app="Finder", title="Timeline Controls", approx full screen) is open
CHECK_COND_TM='yabai -m query --windows --window $YABAI_WINDOW_ID | jq -er ".frame.x == 0 and .frame.y == 0 and .frame.w >= 640 and .frame.h >= 640"'
yabai -m rule --add app="^Finder$" title="^Timeline Controls$" sub-layer=below manage=off
yabai -m signal --add event=window_created app="^Finder$" title="^Timeline Controls$" action="$CHECK_COND_TM && yabai -m space --layout float" # && brew services stop borders"
yabai -m signal --add event=window_title_changed app="^Finder$" title="^Timeline Controls$" action="$CHECK_COND_TM && yabai -m space --layout float" # && brew services stop borders"
yabai -m signal --add event=window_destroyed app="^Finder$" title="^Timeline Controls$" action="$CHECK_COND_TM && yabai -m space --layout bsp" # && brew services start borders"

# - if role is AXSheet, then disable borders temporarily
#yabai -m signal --add event=window_focused action='if [[ $(yabai -m query --windows --window | jq ".role") == "\"AXSheet\"" ]]; then borders active_color=0x00000000; fi';
#yabai -m signal --add event=window_focused action='if [[ $(yabai -m query --windows --window | jq ".role") != "\"AXSheet\"" ]]; then ~/.config/borders/bordersrc 2>/dev/null 1>&2; fi';

# - other rules
EXCLUDE_MANAGE_ROLES_REGEX="(AXMenu|AXSheet|AXDialog|AXPopover|AXSystemDialog|AXFloatingWindow|AXSystemFloatingWindow)"
yabai -m rule --add role="^$EXCLUDE_MANAGE_ROLES_REGEX$" manage=off
yabai -m rule --add subrole="^$EXCLUDE_MANAGE_ROLES_REGEX$" manage=off

yabai -m rule --add app="(^coreauth.*|^universalAccessAuthWarn$)" sub-layer=above manage=off
yabai -m rule --add app="^Finder$" title="^(Move|Copy|Delete|Connecting to Server|Bin|Trash)$" sub-layer=above manage=off
yabai -m rule --add app="^Digital Colou?r Meter$" sub-layer=above manage=off sticky=on
yabai -m rule --add app="^(Archive Utility|DiskImageMounter|Installer)$" sub-layer=above manage=off
yabai -m rule --add app="^Macs Fan Control$" sub-layer=above manage=off
yabai -m rule --add app="^Stickies$" sub-layer=above manage=off sticky=on
yabai -m rule --add app="^Microsoft Teams$" title="^Microsoft Teams Notification$" sub-layer=above manage=off
yabai -m rule --add app="^Final Cut Pro$" title="^Background Tasks$" sub-layer=above manage=off

yabai -m rule --add title="^(Settings|Preferences)$" sub-layer=normal manage=off
yabai -m rule --add app="^(System Settings|System Preferences)$" sub-layer=normal manage=off
yabai -m rule --add title="^Problem Report for" sub-layer=normal manage=off
yabai -m rule --add app="^(Calculator|Calculator Plus)$" sub-layer=normal manage=off
yabai -m rule --add app="^ChatGPT$" title="^$" sub-layer=normal manage=off
yabai -m rule --add app="^Safari$" title="^(General|Privacy|Security|Search|Extensions|Websites|Advanced|Develop|Accounts|AutoFill|Notifications|Password|Tabs|Media)$" sub-layer=normal manage=off
# yabai -m rule --add app="^Parallels Desktop" title="(Settings|Preferences|Configuration|Control Cent(re|er))$" sub-layer=normal manage=off
yabai -m rule --add app="^Parallels Desktop" sub-layer=normal manage=off
yabai -m rule --add app="^IntelliJ IDEA$" title="^(Project Structure)$" sub-layer=normal manage=off
yabai -m rule --add app="^IntelliJ IDEA$" title="^(Rename|Move|Copy|Delete|Safe Delete|Change|Format|Reformat|Add).*$" sub-layer=normal manage=off
yabai -m rule --add app="^FaceTime$" sub-layer=normal manage=off sticky=on

yabai -m rule --add app="^Xcode$" title="^(Devices|Simulators)$" manage=off
yabai -m rule --add app="^iStat Menus" manage=off
yabai -m rule --add app="^Simulator$" manage=off sub-layer=above
yabai -m rule --add app="^qemu-system-.*" title="^Android Emulator.*" manage=off sub-layer=above
yabai -m rule --add app="^iPhone Mirroring$" manage=off sub-layer=above
yabai -m rule --add app="^Music$" title="^Mini Player$" manage=off
yabai -m rule --add app="^Delete Apps$" manage=off
yabai -m rule --add app="bersicht$" sub-layer=below manage=off
yabai -m rule --add app="^TimeMachineEditor$" manage=off
yabai -m rule --add app="^Mac Mouse Fix$" manage=off
yabai -m rule --add app="^NTFS for Mac$" manage=off
yabai -m rule --add app="^waidayo$" manage=off
yabai -m rule --add app="^(QuickTime Player|mpv|IINA)$" manage=off
yabai -m rule --add app="^(Time Machine)$" manage=off
yabai -m rule --add app="^(Desk View)$" manage=off
yabai -m rule --add app="^(Screen Sharing)$" title!="^(All Connections)$" manage=off

# - for windows that aren't windows
yabai -m rule --add app!="^(Xcode|Finder|iTerm2|Photos)$" title="^$" sub-layer=normal manage=off

# - Fullscreen optimized games
yabai -m rule --add app="^Genshin Impact$" native-fullscreen=on manage=off
yabai -m rule --add app="^Honkai: Star Rail$" native-fullscreen=on manage=off
yabai -m rule --add app="^Zenless Zone Zero$" native-fullscreen=on manage=off
yabai -m rule --add app="^java$" title="Minecraft.? [0-9\\.]+" native-fullscreen=on manage=off

#layouts
echo "configuring layouts and appearance"
yabai -m config \
    external_bar all:0:28 \
    window_gap 6 \
    top_padding 0 \
    bottom_padding 0 \
    left_padding 0 \
    right_padding 0 \
    mouse_modifier ctrl \
    mouse_follows_focus off \
    focus_follows_mouse off \
    window_origin_display cursor \
    window_shadow float \
    insert_feedback_color 0xffca66ff \
    window_opacity               off \
    active_window_opacity        1.0 \
    normal_window_opacity        1.0 \
    window_zoom_persist off \
    split_type auto \
    auto_balance on \
    display_arrangement_order default \
    window_animation_duration 0.0 \
    layout bsp

yabai -m config --space 1 layout stack

# invoke JankyBorders
# ~/.config/borders/bordersrc 2>/dev/null 1>&2 &

# done
echo "yabai config is now loaded."
terminal-notifier -title "yabai ready" -message "yabai is fully loaded." -ignoreDnD

# refresh ubersicht again now that we are done
sh -c "$REL_SPACES_IND"
sh -c "$REL_BAR_IND"

# apply rules to all existing rules
yabai -m rule --apply
