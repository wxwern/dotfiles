:: default : terminal-notifier -title "skhd active" -message "all keybindings mapped to yabai wm" -ignoreDnD
:: passthrough : terminal-notifier -title "skhd inactive" -message "all keybindings passed to foreground app" -ignoreDnD

fn + ctrl + alt + cmd - x ; passthrough
passthrough < fn + ctrl + alt + cmd - x ; default

#
# quick relaunches and configs
#

fn + ctrl + alt + cmd - r : \
    terminal-notifier -title "Restarting Desktop Environment" -message "~ Finder, Dock, Übersicht, yabai, skhd." -ignoreDnD; \
    killall Finder; \
    kill -9 $(pgrep bersicht); \
    killall Dock; \
    sleep 5; \
    launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"; \
    skhd -r; \
    open /Applications/Übersicht.app; \
    osascript -e 'tell application id 'tracesof.Uebersicht' to activate';

ctrl + alt + cmd - r : \
    terminal-notifier -title "Reloading Desktop Environment Configs" -message "~ yabai, skhd, Übersicht." -ignoreDnD; \
    kill -9 $(pgrep bersicht); \
    source ~/.yabairc; \
    skhd -r; \
    sleep 1; \
    open /Applications/Übersicht.app; \
    osascript -e 'tell application id 'tracesof.Uebersicht' to activate';


# quick access scripts
ctrl + alt + cmd - h: /Users/LWJ/Scripts/join_discord_home.sh
ctrl + alt + cmd - e: /Users/LWJ/Scripts/undock.sh
ctrl + alt + cmd - t: \
    if [[ "$(pmset -g batt | grep 'AC Power')" ]]; then \
        if [[ "$(pmset -g | grep 'lowpowermode' | tail -c 2)" == "0" ]]; then \
            sudo pmset -c lowpowermode 1 && \
            terminal-notifier -title "Wired Low Power Mode: ON" -message "Low Power Mode Toggled." -ignoreDnD; \
        else \
            sudo pmset -c lowpowermode 0 && \
            terminal-notifier -title "Wired Low Power Mode: OFF" -message "Low Power Mode Toggled." -ignoreDnD; \
        fi; \
    else \
        if [[ "$(pmset -g | grep 'lowpowermode' | tail -c 2)" == "0" ]]; then \
            sudo pmset -b lowpowermode 1 && \
            terminal-notifier -title "Battery Low Power Mode: ON" -message "Low Power Mode Toggled." -ignoreDnD; \
        else \
            sudo pmset -b lowpowermode 0 && \
            terminal-notifier -title "Battery Low Power Mode: OFF" -message "Low Power Mode Toggled." -ignoreDnD; \
        fi; \
    fi; \
    osascript -e "tell application id \"tracesof.uebersicht\" to refresh widget id \"clarity-status-jsx\"";

# launch handoff app with alt tab
alt - 0x30: \
    terminal-notifier -title "Handoff" -message "Launching task via handoff (if possible)..." -ignoreDnD; \
    osascript -e "tell application \"System Events\"" \
    -e "key up option" \
    -e "key up tab" \
    -e "key down command" \
    -e "key down shift" \
    -e "keystroke tab" \
    -e "key up shift" \
    -e "delay 0.2" \
    -e "keystroke tab" \
    -e "key up shift" \
    -e "key up command" \
-e "end tell"

# toggle yabai layout modes
ctrl + alt + cmd - f : \
    if [[ "$(yabai -m query --spaces --space | jq -r '.type')" == "bsp" ]]; then \
        yabai -m space --layout float; \
        terminal-notifier -title "yabai layout for current space toggled" -subtitle "currently: float" -ignoreDnD; \
        osascript -e 'tell application id "tracesof.Uebersicht" to refresh widget id "clarity-bar-jsx"'; \
    else \
        yabai -m space --layout bsp; \
        terminal-notifier -title "yabai layout for current space toggled" -subtitle "currently: bsp" -ignoreDnD; \
        osascript -e 'tell application id "tracesof.Uebersicht" to refresh widget id "clarity-bar-jsx"'; \
    fi;

# toggle yabai padding
fn + ctrl + alt + cmd - p : yabai -m space --toggle padding --toggle gap;

# toggle window border
fn + ctrl - b : yabai -m window --toggle border;

# toggle window sticky and into topmost floating
shift + ctrl + cmd - f : \
    WIN_QUERY="$(yabai -m query --windows --window)"; \
    if [[ "$(printf "$WIN_QUERY" | jq '.["is-topmost"]')" != "$(printf "$WIN_QUERY" | jq '.["is-sticky"]')" ]]; then \
        yabai -m window --toggle topmost; \
    fi; \
    yabai -m window --toggle sticky; \
    if [[ "$(printf "$WIN_QUERY" | jq '.["is-sticky"]')" != "true" ]]; then \
        yabai -m window --grid 5:5:2:2:2:2; \
        terminal-notifier -title "Sticky Window: On" -subtitle "Window is now sticky and topmost." -ignoreDnD; \
    else \
        terminal-notifier -title "Sticky Window: Off" -subtitle "Window is no longer sticky and topmost." -ignoreDnD; \
    fi; \

#
# main operations
#

# focus window
ctrl + alt - up    : yabai -m window --focus north || yabai -m display --focus north
ctrl + alt - down  : yabai -m window --focus south || yabai -m display --focus south
ctrl + alt - left  : yabai -m window --focus west  || yabai -m space --focus prev || yabai -m display --focus west
ctrl + alt - right : yabai -m window --focus east  || yabai -m space --focus next || yabai -m display --focus east

# equalize all windows
ctrl + alt - b : yabai -m space --balance

# move window
ctrl + cmd - up    : yabai -m window --warp north
ctrl + cmd - down  : yabai -m window --warp south
ctrl + cmd - left  : yabai -m window --warp west
ctrl + cmd - right : yabai -m window --warp east

# move window in as stack or cycle
# stack behaviour: stack focused window on last index of the other referenced stack in the given direction
ctrl + alt + cmd - up   : \
    yabai -m query --windows --window | jq '."stack-index" >= 1' && \
    yabai -m window --focus stack.next || \
    (yabai -m window --focus north --focus stack.last --stack south --focus stack.last)
ctrl + alt + cmd - down : \
    yabai -m query --windows --window | jq '."stack-index" >= 1' && \
    yabai -m window --focus stack.prev || \
    (yabai -m window --focus south --focus stack.last --stack north --focus stack.last)
ctrl + alt + cmd - left  : (yabai -m window --focus west --focus stack.last --stack east --focus stack.last)
ctrl + alt + cmd - right : (yabai -m window --focus east --focus stack.last --stack west --focus stack.last)
ctrl + alt + cmd - z : yabai -m window --toggle float --toggle float

# swap windows within stack
ctrl + alt + cmd - 0x1B: yabai -m window --focus stack.prev
ctrl + alt + cmd - 0x18: yabai -m window --focus stack.next

# swap windows by proximity in direction
shift + ctrl + cmd - up    : yabai -m window --swap north
shift + ctrl + cmd - down  : yabai -m window --swap south
shift + ctrl + cmd - left  : yabai -m window --swap west
shift + ctrl + cmd - right : yabai -m window --swap east

# shift window size
shift + ctrl + alt - 0x1B: yabai -m window --ratio rel:-0.05
shift + ctrl + alt - 0x18: yabai -m window --ratio rel:+0.05

# insert area
ctrl + cmd - w : yabai -m window --insert north
ctrl + cmd - s : yabai -m window --insert south
ctrl + cmd - a : yabai -m window --insert west
ctrl + cmd - d : yabai -m window --insert east
ctrl + cmd - z : yabai -m window --insert stack

# space manipulation
ctrl + cmd - r : yabai -m space --rotate 270     #rotate 90° clockwise
ctrl + cmd - x : yabai -m space --mirror x-axis  #flip along x axis
ctrl + cmd - y : yabai -m space --mirror y-axis  #flip along y axis
fn + ctrl + cmd - r : yabai -m window --toggle split #'rotate' windows that are in its parent tree
shift + ctrl + cmd - r : yabai -m window --toggle split #'rotate' windows that are in its parent tree

# toggle floating window
ctrl + cmd - f : yabai -m window --toggle float; skhd -k "shift + ctrl + alt - c";


# center floating window
shift + ctrl + alt - c : yabai -m window --grid 8:8:1:1:6:6; skhd -k "ctrl + alt - c" #center and resize
ctrl + alt - c         : \
    pos_x="$(bc -l <<< "$(yabai -m query --displays --display | jq '.frame.w/2') - $(yabai -m query --windows --window | jq '.frame.w/2') + $(yabai -m query --displays --display | jq '.frame.x')")"; \
    pos_y="$(bc -l <<< "$(yabai -m query --displays --display | jq '.frame.h/2') - $(yabai -m query --windows --window | jq '.frame.h/2') + $(yabai -m query --displays --display | jq '.frame.y')")"; \
    yabai -m window --move abs:$pos_x:$pos_y;


# corner floating window snapping
ctrl + alt - u : yabai -m window --grid 2:2:0:0:1:1 #top left
ctrl + alt - i : yabai -m window --grid 2:2:1:0:1:1 #top right
ctrl + alt - j : yabai -m window --grid 2:2:0:1:1:1 #bottom left
ctrl + alt - k : yabai -m window --grid 2:2:1:1:1:1 #bottom right

# corner floating pip window snapping
shift + ctrl + alt - u : yabai -m window --grid 4:4:0:0:1:1 #top left
shift + ctrl + alt - i : yabai -m window --grid 4:4:3:0:1:1 #top right
shift + ctrl + alt - j : yabai -m window --grid 4:4:0:3:1:1 #bottom left
shift + ctrl + alt - k : yabai -m window --grid 4:4:3:3:1:1 #bottom right
fn + ctrl + alt - u : yabai -m window --grid 4:4:0:0:1:1 #top left
fn + ctrl + alt - i : yabai -m window --grid 4:4:3:0:1:1 #top right
fn + ctrl + alt - j : yabai -m window --grid 4:4:0:3:1:1 #bottom left
fn + ctrl + alt - k : yabai -m window --grid 4:4:3:3:1:1 #bottom right

# vertical sizes floating window snapping
ctrl + alt - 0x21: yabai -m window --grid 1:2:0:0:1:1 #1/2 left
ctrl + alt - 0x1E: yabai -m window --grid 1:2:1:0:1:1 #1/2 right
ctrl + alt - d : yabai -m window --grid 1:3:0:0:1:1 #1/3 left
ctrl + alt - e : yabai -m window --grid 1:3:0:0:2:1 #2/3 left
ctrl + alt - f : yabai -m window --grid 1:3:1:0:1:1 #1/3 center
ctrl + alt - r : yabai -m window --grid 1:6:1:0:4:1 #2/3 center
ctrl + alt - g : yabai -m window --grid 1:3:2:0:1:1 #1/3 right
ctrl + alt - t : yabai -m window --grid 1:3:1:0:2:1 #2/3 right

# maximize floating or tiled window
ctrl + alt - m : yabai -m window --grid 1:1:0:0:1:1 || yabai -m window --toggle zoom-fullscreen #maximize

# shortcuts
ctrl + cmd - t : \
    osascript -e 'if application "iTerm" is not running then tell application "iTerm" to activate' && \
    osascript -e 'tell application "iTerm" to create window with default profile'
shift + ctrl + cmd - t : \
    osascript -e 'tell application "Finder" to make new Finder window to folder "Macintosh HD:Users:LWJ:"' && \
    osascript -e 'tell application "Finder" to activate'

fn - c: skhd -k "ctrl - f2"
fn - f: skhd -k "ctrl - f2"
fn - d: skhd -k "ctrl - f3"
fn - m: skhd -k "ctrl - f8"

# window actions

# switch to space
ctrl - 1 : yabai -m space --focus  1 || skhd -k "ctrl - 1"
ctrl - 2 : yabai -m space --focus  2 || skhd -k "ctrl - 2"
ctrl - 3 : yabai -m space --focus  3 || skhd -k "ctrl - 3"
ctrl - 4 : yabai -m space --focus  4 || skhd -k "ctrl - 4"
ctrl - 5 : yabai -m space --focus  5 || skhd -k "ctrl - 5"
ctrl - 6 : yabai -m space --focus  6 || skhd -k "ctrl - 6"
ctrl - 7 : yabai -m space --focus  7 || skhd -k "ctrl - 7"
ctrl - 8 : yabai -m space --focus  8 || skhd -k "ctrl - 8"
ctrl - 9 : yabai -m space --focus  9 || skhd -k "ctrl - 9"
ctrl - 0 : yabai -m space --focus 10 || skhd -k "ctrl - 10"
alt + ctrl - 1 : yabai -m space --focus 11 || skhd -k "alt + ctrl - 1"
alt + ctrl - 2 : yabai -m space --focus 12 || skhd -k "alt + ctrl - 2"
alt + ctrl - 3 : yabai -m space --focus 13 || skhd -k "alt + ctrl - 3"
alt + ctrl - 4 : yabai -m space --focus 14 || skhd -k "alt + ctrl - 4"
alt + ctrl - 5 : yabai -m space --focus 15 || skhd -k "alt + ctrl - 5"
alt + ctrl - 6 : yabai -m space --focus 16 || skhd -k "alt + ctrl - 6"
alt + ctrl - 7 : yabai -m space --focus 17 || skhd -k "alt + ctrl - 7"
alt + ctrl - 8 : yabai -m space --focus 18 || skhd -k "alt + ctrl - 8"
alt + ctrl - 9 : yabai -m space --focus 19 || skhd -k "alt + ctrl - 9"
alt + ctrl - 0 : yabai -m space --focus 20 || skhd -k "alt + ctrl - 0"

# move window to space
shift + ctrl - 1 : yabai -m window --space  1 && yabai -m space --focus  1
shift + ctrl - 2 : yabai -m window --space  2 && yabai -m space --focus  2
shift + ctrl - 3 : yabai -m window --space  3 && yabai -m space --focus  3
shift + ctrl - 4 : yabai -m window --space  4 && yabai -m space --focus  4
shift + ctrl - 5 : yabai -m window --space  5 && yabai -m space --focus  5
shift + ctrl - 6 : yabai -m window --space  6 && yabai -m space --focus  6
shift + ctrl - 7 : yabai -m window --space  7 && yabai -m space --focus  7
shift + ctrl - 8 : yabai -m window --space  8 && yabai -m space --focus  8
shift + ctrl - 9 : yabai -m window --space  9 && yabai -m space --focus  9
shift + ctrl - 0 : yabai -m window --space 10 && yabai -m space --focus 10
shift + alt + ctrl - 1 : yabai -m window --space 11 && yabai -m space --focus 11
shift + alt + ctrl - 2 : yabai -m window --space 12 && yabai -m space --focus 12
shift + alt + ctrl - 3 : yabai -m window --space 13 && yabai -m space --focus 13
shift + alt + ctrl - 4 : yabai -m window --space 14 && yabai -m space --focus 14
shift + alt + ctrl - 5 : yabai -m window --space 15 && yabai -m space --focus 15
shift + alt + ctrl - 6 : yabai -m window --space 16 && yabai -m space --focus 16
shift + alt + ctrl - 7 : yabai -m window --space 17 && yabai -m space --focus 17
shift + alt + ctrl - 8 : yabai -m window --space 18 && yabai -m space --focus 18
shift + alt + ctrl - 9 : yabai -m window --space 19 && yabai -m space --focus 19
shift + alt + ctrl - 0 : yabai -m window --space 20 && yabai -m space --focus 20

shift + alt + ctrl - left : yabai -m window --space prev && yabai -m space --focus prev
shift + alt + ctrl - right : yabai -m window --space next && yabai -m space --focus next

# create a new space
alt + ctrl - 0x18 : \
    yabai -m space --create || \
    (terminal-notifier -title "Can't Create Space" -subtitle "yabai scripting-addition failed." -ignoreDnD && \
    osascript -e "$(printf "beep\ndelay 1")"); \
    osascript -e "tell application id \"tracesof.uebersicht\" to refresh widget id \"clarity-spaces-jsx\"";

# delete current space
alt + ctrl - 0x1B : \
    yabai -m space --destroy || \
    (terminal-notifier -title "Can't Delete Space" -subtitle "Either this is the only space left on this display, or yabai scripting-addition failed." -ignoreDnD && \
    osascript -e "$(printf "beep\ndelay 1")"); \
    osascript -e "tell application id \"tracesof.uebersicht\" to refresh widget id \"clarity-spaces-jsx\""


# switch display focus
ctrl + alt + cmd - 1 : yabai -m display --focus 1
ctrl + alt + cmd - 2 : yabai -m display --focus 2
ctrl + alt + cmd - 3 : yabai -m display --focus 3
ctrl + alt - 0x2B : yabai -m display --focus west
ctrl + alt - 0x2F : yabai -m display --focus east

# move window in display direction
shift + alt + ctrl - 0x2B : \
    WIN_ID="$(yabai -m query --windows --window | jq '.id')"; \
    yabai -m window --display west --focus "$WIN_ID";

shift + alt + ctrl - 0x2F : \
    WIN_ID="$(yabai -m query --windows --window | jq '.id')"; \
    yabai -m window --display east --focus "$WIN_ID";

shift + alt + ctrl - up : \
    WIN_ID="$(yabai -m query --windows --window | jq '.id')"; \
    yabai -m window --display north --focus "$WIN_ID";

shift + alt + ctrl - down : \
    WIN_ID="$(yabai -m query --windows --window | jq '.id')"; \
    yabai -m window --display south --focus "$WIN_ID";
